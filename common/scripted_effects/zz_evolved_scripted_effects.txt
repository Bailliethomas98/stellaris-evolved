# common\scripted_effects\zz_evolved_scripted_effects.txt

tec_cache = {
	optimize_memory
	[[scope_redirect]
		if = {
			limit = {
				exists = $scope_redirect$
				$scope_redirect$ = {
					$trigger$ = yes
				}
			}
			set_$scope$_flag = tec_cache_$trigger$
		} else = {
			remove_$scope$_flag = tec_cache_$trigger$
		}
	]
	[[!scope_redirect]
		if = {
			limit = {
				$trigger$ = yes
			}
			set_$scope$_flag = tec_cache_$trigger$
		} else = {
			remove_$scope$_flag = tec_cache_$trigger$
		}
	]

}

tec_cache_value = {
	optimize_memory
	set_variable = {
		which = tec_cache_$value$
		value = value:$value$
	}
}

tec_cache_planet_type_triggers = {
	optimize_memory
	tec_cache = {
		scope = planet
		trigger = tec_is_arcology
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_space_arcology
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_habitat
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_ringworld
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_elysium
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_city_world
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_perfect_planet
	}
	tec_cache = {
		scope = planet
		trigger = tec_is_neutral_planet
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_all_slots_unlocked
	}

	# planet job swaps

	tec_cache = {
		scope = planet
		trigger = tec_pd_has_crucible_foundry
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_foundry_planet_swap
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_scrap_miner
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_matter_miner
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_miner_planet_swap
	}

	tec_cache = {
		scope = planet
		trigger = tec_mining_aqua_district_swap
		scope_redirect = owner
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_miner_swap
		scope_redirect = owner
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_farmer_planet_swap
	}

	tec_cache = {
		scope = planet
		trigger = tec_farming_aqua_district_swap
		scope_redirect = owner
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_farmer_swap
		scope_redirect = owner
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_technician_swap
		scope_redirect = owner
	}

	tec_cache = {
		scope = planet
		trigger = tec_generator_aqua_district_swap
		scope_redirect = owner
	}

	tec_cache = {
		scope = planet
		trigger = tec_has_technician_planet_swap
	}

	tec_effect_mod_support = {
		effect = tec_cache_planet_type_triggers
	}
}

tec_cache_capital_triggers = {
	optimize_memory
	tec_cache = {
		scope = planet
		trigger = tec_has_t1_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t2_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t3_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t4_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_t5_capital
	}
	tec_cache = {
		scope = planet
		trigger = tec_has_imperial_capital
	}
	tec_cache_value = {
		value = tec_capital_tier
	}
	tec_cache_value = {
		value = tec_capital_tier_generic_scaling
	}

	tec_effect_mod_support = {
		effect = tec_cache_capital_triggers
	}
}

tec_cache_building_triggers = {
	optimize_memory
	tec_effect_mod_support = {
		effect = tec_cache_building_triggers
	}
}

tec_cache_combined_values = {
	optimize_memory
	tec_cache_value = {
		value = farming_combined_value
	}
	tec_cache_value = {
		value = mining_combined_value
	}
	tec_cache_value = {
		value = generator_combined_value
	}
	tec_cache_value = {
		value = research_combined_value
	}
	tec_cache_value = {
		value = unity_combined_value
	}
	tec_cache_value = {
		value = refinery_combined_value
	}
	tec_cache_value = {
		value = trade_combined_value
	}
	tec_cache_value = {
		value = military_combined_value
	}

	tec_effect_mod_support = {
		effect = tec_cache_value_triggers
	}
}

tec_cache_colony_triggers = {
	optimize_memory

	tec_cache = {
		scope = planet
		trigger = tec_has_special_ruler_feature
	}
	tec_cache = {
		scope = planet
		trigger = tec_planet_selective_kinship_likes
	}
	tec_cache = {
		scope = planet
		trigger = tec_planet_selective_kinship_hates
	}
	tec_cache = {
		scope = planet
		trigger = tec_planet_allows_automation
	}

	tec_effect_mod_support = {
		effect = tec_cache_colony_triggers
	}
}

tec_cache_planet_scope_triggers = {
	optimize_memory
	tec_cache_planet_type_triggers = yes
	tec_cache_capital_triggers = yes
	tec_cache_building_triggers = yes
	tec_cache_colony_triggers = yes
	tec_cache_combined_values = yes
}

tec_cache_shackled_triggers = {
	optimize_memory
	tec_cache = {
		scope = pop
		trigger = tec_is_shackled_robot
	}
	tec_cache = {
		scope = pop
		trigger = tec_is_non_sapient_robot
	}
	tec_cache = {
		scope = pop
		trigger = tec_is_shackled_bioservant
	}
	
	tec_cache = {
		scope = pop
		trigger = tec_is_non_sapient_bioservant
	}
}


tec_cache_pop_triggers = {
	optimize_memory
	tec_cache = {
		scope = pop
		trigger = tec_purge_pop_category_trigger
	}
	tec_cache = {
		scope = pop
		trigger = tec_has_stapled_trait
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_slave
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_worker
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_worker_only
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_specialist
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_specialist_only
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_simple_drone
	}
	tec_cache = {
		scope = pop
		trigger = tec_ecocat_planet_jobs_complex_drone
	}

	tec_effect_mod_support = {
		effect = tec_cache_pop_triggers
	}
}

tec_cache_species_traits_triggers = {
	optimize_memory
	tec_cache = {
		scope = species
		trigger = tec_has_stapled_trait
	}
	
	tec_cache = {
		scope = species
		trigger = tec_has_ruler_job_invalidation_trait
	}

	tec_cache = {
		scope = species
		trigger = tec_is_total_psionic_species
	}

	tec_effect_mod_support = {
		effect = tec_cache_species_traits_triggers
	}
}

tec_cache_country_monthly_triggers = {
	optimize_memory
	if = {
		limit = {
			tec_is_default_country = yes
			is_regular_empire = yes
		}
		tec_cache = {
			scope = country
			trigger = tec_xeno_any_genocided_our_species
		}
		tec_cache = {
			scope = country
			trigger = tec_xeno_we_genocided_any
		}
		tec_cache = {
			scope = country
			trigger = tec_xeno_any_enslaved_us
		}
		tec_cache = {
			scope = country
			trigger = tec_militarist_any_own_our_planets
		}
		tec_cache = {
			scope = country
			trigger = tec_found_guardian
		}
		tec_cache = {
			scope = country
			trigger = tec_is_xenophage
		}

		# values
		tec_cache_value = {
			value = authoritarian_ethics_from_relations
		}
		tec_cache_value = {
			value = egalitarian_ethics_from_relations
		}
		tec_cache_value = {
			value = xenophobe_ethics_from_relations
		}
		tec_cache_value = {
			value = xenophile_ethics_from_relations
		}
		tec_cache_value = {
			value = spiritualist_ethics_from_relations
		}
		tec_cache_value = {
			value = materialist_ethics_from_relations
		}
		tec_cache_value = {
			value = pacifist_ethics_from_pacts
		}
		tec_cache_value = {
			value = tec_cooperative_ethics_from_relations
		}
		tec_cache_value = {
			value = tec_competitive_ethics_from_relations
		}
	}

	tec_effect_mod_support = {
		effect = tec_cache_country_monthly_triggers
	}
}

# This is separate to be able to update only when needed
tec_cache_country_civic_triggers = {
	optimize_memory
	tec_cache = {
		scope = country
		trigger = tec_is_psychohistorian_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_technomancer_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_starseeker_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_psi_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_bio_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_mecha_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_labrat_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_diversifier_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_astrologer_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_singularity_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_is_special_researcher_empire
	}
	tec_cache = {
		scope = country
		trigger = tec_replaces_half_researcher_empire
	}
	# Cults
	tec_cache = {
		scope = country
		trigger = tec_is_death_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_machine_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_occult_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_paperwork_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_starseeker_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_atom_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_cycle_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_wealth_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_paranormal_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_butlerian_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_spiritualist_main_cult
	}
	tec_cache = {
		scope = country
		trigger = tec_is_spiritualist_secondary_cult
	}
	# Ruler
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_regular
	}
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_mega
	}
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic
	}
	
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_hive
	}
	tec_cache = {
		scope = country
		trigger = tec_has_maintenance_drone_swap_civic_hive
	}
	
	tec_cache = {
		scope = country
		trigger = tec_has_ruler_civic_machine
	}
	tec_cache = {
		scope = country
		trigger = tec_has_directive_civic_machine
	}
	tec_cache = {
		scope = country
		trigger = tec_has_maintenance_drone_swap_civic_machine
	}
	# Swaps

	tec_cache = {
		scope = country
		trigger = tec_has_entertainer_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_healthcare_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_enforcer_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_colonist_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_clerk_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_coordinator_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_soldier_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_maintenance_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_patrol_drone_swap
	}
	tec_cache = {
		scope = country
		trigger = tec_has_warrior_drone_swap
	}

	tec_cache = {
		scope = country
		trigger = tec_uses_regular_empire_jobs
	}

	# Types
	tec_cache = {
		scope = country
		trigger = tec_is_dystopian_empire
	}

	tec_cache = {
		scope = country
		trigger = tec_is_selective_kinship_empire
	}
	# politician swaps
	tec_cache = {
		scope = country
		trigger = tec_country_has_politician_ruler
	}

	tec_cache = {
		scope = country
		trigger = tec_country_has_tec_ai_computator_ruler
	}

	tec_cache = {
		scope = country
		trigger = tec_country_has_tec_ai_high_ordinator_ruler
	}

	tec_cache = {
		scope = country
		trigger = tec_country_has_executive_ruler
	}

	tec_cache = {
		scope = country
		trigger = tec_country_has_steward_ruler
	}

	tec_effect_mod_support = {
		effect = tec_cache_country_civic_triggers
	}
}

tec_cache_councilor = {
	optimize_memory
	if = {
		limit = { 
			is_councilor_type = $type$
		}
		prev = { set_country_flag = tec_cache_tec_has_councilor_$type$ }
	}
}

tec_clean_councilor_cache = {
	optimize_memory
	remove_country_flag = tec_cache_tec_has_councilor_$type$
}

tec_cache_country_councilor_triggers = {
	optimize_memory
	# Clean flags
	tec_cache_country_councilor_triggers_autogen = yes

	tec_effect_mod_support = {
		effect = tec_cache_country_councilor_triggers
	}
}


# scope: country
tec_cache_opinions = {
	optimize_memory
	if = {
		limit = {
			OR = {
				tec_is_default_country = yes
				is_fallen_empire = yes
			}
		}
		every_spynetwork = {
			limit = {
				target = {
					has_established_contact = prevprev
					OR = {
						tec_is_default_country = yes
						is_fallen_empire = yes
					}
				}
			}
			target = {
				set_variable = {
					which = tec_cache_tec_opinion 
					value = 0
				}
				set_variable = {
					which = tec_cache_tec_their_opinion 
					value = 0
				}
				export_trigger_value_to_variable = { # we reverse them due to using this on target
					variable = tec_cache_tec_opinion
					trigger = their_opinion
					parameters = { who = prevprev }
				}
				export_trigger_value_to_variable = {
					variable = tec_cache_tec_their_opinion
					trigger = opinion
					parameters = { who = prevprev }
				}
			}
			set_variable = {
				which = tec_cache_tec_opinion
				value = target.tec_cache_tec_opinion
			}
			set_variable = {
				which = tec_cache_tec_their_opinion
				value = target.tec_cache_tec_their_opinion
			}
			set_variable = {
				which = tec_cache_tec_opinion_total
				value = tec_cache_tec_opinion
			}
			change_variable = {
				which = tec_cache_tec_opinion_total
				value = tec_cache_tec_their_opinion
			}
		}
	}
}

tec_cache_everything = {
	optimize_memory
	random_country = {
		country_event = {
			id = tec_caching.7
		}
	}
}

tec_hoarders_recover_resource = {
	if = {
		limit = {
			is_variable_set = tec_$RESOURCE$_stockpile
		}
		set_variable = {
			which = tec_$RESOURCE$_recovered
			value = tec_$RESOURCE$_stockpile
		}
		divide_variable = {
			which = tec_$RESOURCE$_recovered
			value = 2
		}
		owner = {
			add_resource = {
				$RESOURCE$ = 1
				mult = prev.tec_$RESOURCE$_recovered
			}
		}
		clear_variable = tec_$RESOURCE$_stockpile
	} else = {
		set_variable = {
			which = tec_$RESOURCE$_recovered
			value = 0
		}
	}
}

tec_hoarders_withdraw_resource = {
	if = {
		limit = {
			is_variable_set = tec_$RESOURCE$_stockpile
		}
		owner = {
			add_resource = {
				$RESOURCE$ = 1
				mult = prev.tec_$RESOURCE$_stockpile
			}
		}
		clear_variable = tec_$RESOURCE$_stockpile
	}
	
}

tec_hoarders_manage_resource = {
	if = {
		limit = {
			has_planet_flag = tec_vault_manage_$RESOURCE$
		}
		event_target:tec_hoarders_managed_planet = {
			change_variable = {
				which = tec_$RESOURCE$_stockpile
				value = tec_stockpile_change
			}
			owner = {
				add_resource = {
					$RESOURCE$ = -1
					mult = prev.tec_stockpile_change
				}
			}
		}
	}
}

tec_terraformer_keeper_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_sanctified_eco_grounds
		}
	}
}

tec_terraformer_keeper_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_sanctified_eco_grounds_ring
		}
	}
}

tec_terraformer_environmentalist_planet_deposit_effect = {
	random_list = {
		10 = {
			modifier = {
				factor = 0.5
				has_climate = wet
			}
			modifier = {
				factor = 1.25
				has_climate = cold
			}
			add_deposit = d_mountain_range
		}
		10 = {
			modifier = {
				factor = 1.25
				has_climate = dry
			}
			add_deposit = d_active_volcano
		}
		10 = {
			modifier = {
				factor = 0.5
				has_climate = cold
			}
			add_deposit = d_dangerous_wildlife_blocker
		}
		10 = {
			modifier = {
				factor = 0.5
				has_climate = dry
			}
			add_deposit = d_dense_jungle
		}
		10 = {
			modifier = {
				factor = 0.5
				has_climate = dry
			}
			modifier = {
				factor = 1.25
				has_climate = wet
			}
			add_deposit = d_toxic_kelp
		}
		10 = {
			modifier = {
				factor = 1.25
				has_climate = dry
			}
			add_deposit = d_deep_sinkhole
		}
		10 = {
			modifier = {
				factor = 1.25
				has_climate = dry
			}
			add_deposit = d_quicksand_basin
		}
		10 = {
			modifier = {
				factor = 1.25
				OR = {
					has_climate = wet
					has_climate = cold
				}
			}
			add_deposit = d_noxious_swamp
		}
		10 = {
			modifier = {
				factor = 0.5
				has_climate = dry
			}
			add_deposit = d_massive_glacier
		}
	}
}

tec_terraformer_environmentalist_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ring
		}
		10 = {
			add_deposit = d_tec_preserved_eco_ring_2
		}
	}
}

tec_terraformer_engineers_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_eco_basin
		}
		10 = {
			add_deposit = d_tec_eco_glacier
		}
		10 = {
			add_deposit = d_tec_eco_jungle
		}
		10 = {
			add_deposit = d_tec_eco_kelp
		}
		10 = {
			add_deposit = d_tec_eco_mountains_range
		}
		10 = {
			add_deposit = d_tec_eco_sinkhole
		}
		10 = {
			add_deposit = d_tec_eco_swamp
		}
		10 = {
			add_deposit = d_tec_eco_volcano
		}
		10 = {
			add_deposit = d_tec_eco_wildlife_blocker
		}
	}
}

tec_terraformer_engineers_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_eco_synthetic_life
		}
		10 = {
			add_deposit = d_tec_eco_synthetic_volcano
		}
		10 = {
			add_deposit = d_tec_eco_synthetic_flora
		}
	}
}

tec_terraformer_preserver_planet_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ecology
		}
		10 = {
			add_deposit = d_tec_preserved_eco_mining
		}
		10 = {
			add_deposit = d_tec_preserved_eco_other
		}
	}
}

tec_terraformer_preserver_arcology_deposit_effect = {
	random_list = {
		10 = {
			add_deposit = d_tec_preserved_eco_ring
		}
		10 = {
			add_deposit = d_tec_preserved_eco_ring_2
		}
	}
}

tec_engineer_precursor_deposit_effect = {
	if = {
		limit = {
			this.solar_system = {
				any_system_planet = {
					OR = {
						has_planet_flag = precursor_world
						has_planet_flag = gpm_is_precursor_world
					}
				}
			}
		}
		add_deposit = d_tec_engineered_precursor
	}
}

tec_engineer_habitat_deposit_effect = {
	random_list = {
		10 = {
			modifier = {
				factor = 100
				has_trade_designation = yes
			}
			add_deposit = d_tec_engineered_hangar
		}
		10 = {
			modifier = {
				factor = 100
				has_foundry_designation = yes
			}
			add_deposit = d_tec_engineered_industrial
		}
		10 = {
			modifier = {
				factor = 100
				has_refinery_designation = yes
			}
			add_deposit = d_tec_engineered_refinery
			random_list = {
				10 = {
					set_planet_flag = tec_engineer_chemist_refinery
				}
				10 = {
					set_planet_flag = tec_engineer_gas_refiner_refinery
				}
				10 = {
					set_planet_flag = tec_engineer_translucer_refinery
				}
			}
		}
	}
}

tec_engineer_arcology_deposit_effect = {
	random_list = {
		10 = {	# Industrial
			modifier = {
				factor = 100
				OR = {
					has_industrial_designation = yes
					has_foundry_designation = yes
					has_factory_designation = yes
				}
			}
			add_deposit = d_tec_engineered_eco_ring_1
		}
		10 = {	# Energy
			modifier = {
				factor = 100
				OR = {
					has_generator_designation = yes
					has_rural_designation = yes
				}
			}
			add_deposit = d_tec_preserved_eco_ring_2			
		}
		10 = {
			modifier = {
				factor = 100
				OR = {
					has_trade_designation = yes
					has_fortress_designation = yes
				}
			}
			add_deposit = d_tec_engineered_eco_ring_3
		}
	}
}

tec_terraformer_deposit_effect = {
	if = {
		limit = {
			owner = {
				tec_is_terraformer_keeper_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_keeper_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_environmentalist_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_environmentalist_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_engineer_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_engineers_$type$_deposit_effect = yes
		}
	}
	if = {
		limit = {
			owner = {
				tec_is_terraformer_preserver_empire = yes
			}
		}
		while = {
			count = $count$
			tec_terraformer_preserver_$type$_deposit_effect = yes
		}
	}
}

tec_add_engineered_weather = {
	if = {
		limit = {
			NOT = {
				has_modifier = pm_tec_engineered_weather
			}
		}
		add_modifier = {
			modifier = pm_tec_engineered_weather
			days = -1
		}
	}
}

tec_add_engineered_habitat = {
	if = {
		limit = {
			NOT = {
				has_modifier = pm_tec_engineered_habitat
			}
		}
		add_modifier = {
			modifier = pm_tec_engineered_habitat
			days = -1
		}
	}
}

tec_faction_terraform_effect = {
	change_variable = {
		which = tec_terraformed_worlds
		value = 1
	}
}

# Galactic Paragons

tec_country_get_robot_species = {
	optimize_memory
	if = {	# get true if exists
		# If the empire has robotic species, adapts the aiauth to it
		limit = {
			OR = {
				any_galaxy_species = {
					OR = {
						has_species_flag = mechanical_species@root
					}
					
				}
			}
		}
		random_galaxy_species = {
			limit = {
				has_species_flag = mechanical_species@root
			}
			save_event_target_as = tec_robot_search_species
		}
	}
	else_if = {	# Get fake then
		limit = {
			OR = {
				any_galaxy_species = {
					OR = {
						has_species_flag = mechanical_species_fake_@root
					}
					
				}
			}
		}
		random_galaxy_species = {
			limit = {
				has_species_flag = mechanical_species_fake_@root
			}
			save_event_target_as = tec_robot_search_species
		}
	}
	else = {
		# Creates a fake robot species
		# Later when the robot tech is researched the leader change species
		tec_create_fake_robot_species = yes
		last_created_species = {
			save_event_target_as = tec_robot_search_species
		}
	}
}

tec_country_aiauth_prepare_ai_species = {
	optimize_memory
	if = {
		limit = {
			NOT = { exists = event_target:tec_ai_species }
		}
		tec_country_get_robot_species = yes
		event_target:tec_robot_search_species = {
			save_event_target_as = tec_ai_species
		}
	}
}

tec_country_create_aiauth_ruler  = {
	set_country_flag = tec_force_councilor_traits
	tec_country_aiauth_prepare_ai_species = yes
	create_leader = {
		class = $CLASS|official$
		species = event_target:tec_ai_species
		name = tec_aiauth_ruler
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_assign_to_council = yes
		hide_leader = no
		custom_description = councilor_tec_aiauth_ruler_desc
		randomize_traits = yes
		background_ethic = $ETHIC|ethic_gestalt_consciousness$
		effect = {
			save_event_target_as = tec_aiauth_ruler
		}
	}
	event_target:tec_aiauth_ruler = {
		set_leader_flag = tec_no_species_traits
		add_trait_no_notify = leader_trait_tec_aiauth_ruler
		tec_leader_add_councilor_trait = yes
		set_owner = prev
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
		set_leader_flag = leader_death_events_blocked
		set_leader_flag = tec_aiauth_ruler_@prev
	}
	assign_leader = event_target:tec_aiauth_ruler
	remove_country_flag = tec_force_councilor_traits
}

tec_country_create_aiauth_ruler_replace = {
	set_country_flag = tec_force_councilor_traits
	set_country_flag = tec_no_starting_traits_modification
	set_country_flag = tec_no_starting_skill_modification
	tec_country_aiauth_prepare_ai_species = yes
	$RULER$ = {
		save_event_target_as = tec_replaced_ruler
	}
	clone_leader = {
		target = event_target:tec_replaced_ruler
		species = event_target:tec_ai_species
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_assign_to_council = yes
		hide_leader = no
		custom_description = councilor_tec_aiauth_ruler_desc
		randomize_traits = no
		effect = {
			save_event_target_as = tec_aiauth_ruler
			copy_flags_and_variables_from = event_target:tec_replaced_ruler
		}
	}
	event_target:tec_aiauth_ruler = {
		set_leader_flag = tec_no_species_traits
		change_background_job = none
		change_leader_portrait = event_target:tec_ai_species
		set_name = event_target:tec_replaced_ruler
		add_trait_no_notify = leader_trait_tec_aiauth_ruler
		tec_leader_add_councilor_trait = yes
		set_owner = prev
		set_leader_flag = leader_death_events_blocked
		set_leader_flag = tec_aiauth_ruler_@prev
	}
	assign_leader = event_target:tec_aiauth_ruler

	remove_country_flag = tec_force_councilor_traits
	remove_country_flag = tec_no_starting_traits_modification
	remove_country_flag = tec_no_starting_skill_modification

	event_target:tec_replaced_ruler = {
		exile_leader_as = destitute_ruler_ai_auth
	}
}

tec_country_refragment_aiauth_ruler  = {
	if = {
		limit = {
			has_country_flag = tec_fragmenting_official
		}
		tec_country_create_aiauth_ruler = {
			CLASS = official
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_commander
		}
		tec_country_create_aiauth_ruler = {
			CLASS = commander
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_scientist
		}
		tec_country_create_aiauth_ruler = {
			CLASS = scientist
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	event_target:tec_aiauth_ruler = {
		if = {
			limit = {
				exists = event_target:tec_aiauth_pre_refragment
			}
			set_name = event_target:tec_aiauth_pre_refragment
			change_leader_portrait = event_target:tec_aiauth_pre_refragment
		}
		while = {
			count = prev.tec_aiauth_ruler_level
			add_skill_without_trait_selection = 1
		}
	}
}

tec_country_create_aiauth_councilor = {
	set_country_flag = tec_force_councilor_traits
	tec_country_aiauth_prepare_ai_species = yes
	create_leader = {
		class = $CLASS$
		species = event_target:tec_ai_species
		name = $NAME$
		skill = 1
		gender = indeterminable
		event_leader = yes
		skip_background_generation = yes
		can_manually_change_location = no
		can_assign_to_council = yes
		hide_leader = no
		custom_description = $DESC$
		randomize_traits = yes
		background_ethic = $ETHIC|ethic_gestalt_consciousness$
		effect = {
			if = {	# Avoids sudden synth trait to appear
				limit = {
					has_trait = leader_trait_synthetic
				}
				remove_trait = leader_trait_synthetic
			}
			set_leader_flag = tec_no_species_traits
			save_event_target_as = tec_aiauth_councilor
		}
	}
	event_target:tec_aiauth_councilor = {
		set_owner = prev
		add_trait_no_notify = leader_trait_tec_aiauth_node
		tec_leader_add_councilor_trait = yes
		[[COUNCIL_POS]
			set_council_position = $COUNCIL_POS$
		]
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
		set_gestalt_node_protrait_effect = yes
		set_leader_flag = leader_death_events_blocked
		add_skill_without_trait_selection = owner.modifier:leader_initial_skill
		switch = {
			trigger = leader_class
			commander = {
				add_skill_without_trait_selection = owner.modifier:commander_initial_skill
			}
			official = {
				add_skill_without_trait_selection = owner.modifier:official_initial_skill
			}
			scientist = {
				add_skill_without_trait_selection = owner.modifier:scientist_initial_skill
			}
		}
	}
	[[!ETHIC]
	if = {	# Removes gestalt ethic
		limit = {
			event_target:tec_aiauth_councilor = {
				has_ethic = ethic_gestalt_consciousness
			}
		}
		# this = country
		# event_target:tec_aiauth_councilor = node
		tec_country_aiauth_councilor_assign_ethic = {
			TARGET_SCOPE = event_target:tec_aiauth_councilor
		}
	}
	]
	remove_country_flag = tec_force_councilor_traits
}

tec_country_aiauth_councilor_assign_ethic = {
	random_owned_pop = {
		limit = {
			# Happiness = ethic
			pop_has_happiness = yes
			NOR = {
				has_trait = trait_zombie
				has_trait = trait_nerve_stapled
				has_trait = trait_presapient_proles
				has_trait = trait_syncretic_proles
			}
			# Lets avoid repetitive things
			NOT = {
				has_pop_flag = tec_temp_pop_aiauth
			}
		}
		save_event_target_as = tec_temp_pop
	}
	event_target:tec_temp_pop = {
		# Lets avoid repetitive things
		set_timed_pop_flag = {
			flag = tec_temp_pop_aiauth
			days = 1
		}
		switch = {
			trigger = has_ethic
			# Vanilla
			ethic_authoritarian = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_authoritarian
				}
			}
			ethic_egalitarian = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_egalitarian
				}
			}
			ethic_xenophobe = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_xenophobe
				}
			}
			ethic_xenophile = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_xenophile
				}
			}
			ethic_militarist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_militarist
				}
			}
			ethic_pacifist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_pacifist
				}
			}
			ethic_spiritualist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_spiritualist
				}
			}
			ethic_materialist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_materialist
				}
			}
			# Evolved
			ethic_cooperative = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_cooperative
				}
			}
			ethic_competitive = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_competitive
				}
			}
			ethic_ecologist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_ecologist
				}
			}
			ethic_industrialist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_industrialist
				}
			}
			ethic_elitist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_elitist
				}
			}
			ethic_pluralist = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_pluralist
				}
			}
			# Gestalt
			ethic_gestalt_consciousness = {
				$TARGET_SCOPE$ = {
					change_background_ethic = ethic_gestalt_consciousness
				}
			}
		}
	}
}
# Example
#tec_country_aiauth_councilor_assign_ethic = {
#	SCOPE_PREV = scope
#	TARGET_SCOPE = target
#}


tec_country_refragment_aiauth_councilor = {
	if = {
		limit = {
			has_country_flag = tec_fragmenting_official
		}
		tec_country_create_aiauth_councilor = {
			CLASS = official
			NAME = councilor_tec_aiauth_fragment_official
			DESC = councilor_tec_aiauth_fragment_official_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_commander
		}
		tec_country_create_aiauth_councilor = {
			CLASS = commander
			NAME = councilor_tec_aiauth_fragment_commander
			DESC = councilor_tec_aiauth_fragment_commander_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_scientist
		}
		tec_country_create_aiauth_councilor = {
			CLASS = scientist
			NAME = councilor_tec_aiauth_fragment_scientist
			DESC = councilor_tec_aiauth_fragment_scientist_desc
			ETHIC = $ETHIC|ethic_gestalt_consciousness$
		}
	}
}

tec_country_create_aiauth_planetary_governing_node = {
	set_country_flag = tec_force_normal_traits
	tec_country_aiauth_prepare_ai_species = yes
	if = {
		limit = {
			has_country_flag = tec_fragmenting_official
		}
		create_leader = {
			class = official
			species = event_target:tec_ai_species
			name = tec_aiauth_planetary_governing_node
			skill = 1
			gender = indeterminable
			event_leader = yes
			skip_background_generation = yes
			can_manually_change_location = no
			hide_leader = no
			can_assign_to_council = no
			custom_description = tec_aiauth_planetary_governing_node_desc
			randomize_traits = yes
			background_ethic = $ETHIC|ethic_gestalt_consciousness$
			effect = {
				if = {	# Avoids sudden synth trait to appear
					limit = {
						has_trait = leader_trait_synthetic
					}
					remove_trait = leader_trait_synthetic
				}
				set_leader_flag = tec_no_species_traits
				save_event_target_as = tec_aiauth_planetary_governing_node
			}
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_commander
		}
		create_leader = {
			class = commander
			species = event_target:tec_ai_species
			name = tec_aiauth_planetary_governing_node
			skill = 1
			gender = indeterminable
			event_leader = yes
			skip_background_generation = yes
			can_manually_change_location = no
			hide_leader = no
			can_assign_to_council = no
			custom_description = tec_aiauth_planetary_governing_node_desc
			randomize_traits = yes
			background_ethic = $ETHIC|ethic_gestalt_consciousness$
			effect = {
				save_event_target_as = tec_aiauth_planetary_governing_node
			}
		}
	}
	else_if = {
		limit = {
			has_country_flag = tec_fragmenting_scientist
		}
		create_leader = {
			class = scientist
			species = event_target:tec_ai_species
			name = tec_aiauth_planetary_governing_node
			skill = 1
			gender = indeterminable
			event_leader = yes
			skip_background_generation = yes
			can_manually_change_location = no
			hide_leader = no
			can_assign_to_council = no
			custom_description = tec_aiauth_planetary_governing_node_desc
			randomize_traits = yes
			background_ethic = $ETHIC|ethic_gestalt_consciousness$
			effect = {
				save_event_target_as = tec_aiauth_planetary_governing_node
			}
		}
	}
	event_target:tec_aiauth_planetary_governing_node = {
		set_leader_flag = tec_no_species_traits
		add_trait_no_notify = leader_trait_tec_aiauth_planetary_governing_node
		set_owner = prev
		tec_leader_add_governor_trait = yes
		tec_leader_handle_starting_modifiers = {
			from = prev
		}
		add_skill_without_trait_selection = owner.modifier:leader_initial_skill
		switch = {
			trigger = leader_class
			commander = {
				add_skill_without_trait_selection = owner.modifier:commander_initial_skill
			}
			official = {
				add_skill_without_trait_selection = owner.modifier:official_initial_skill
			}
			scientist = {
				add_skill_without_trait_selection = owner.modifier:scientist_initial_skill
			}
		}
		set_name = {
			key = "tec_aiauth_planetary_governing_node"
			variable_string = "\\[tec_aiauth_planetary_governing_node_planet\\]"
		}
		set_gestalt_node_protrait_effect = yes
		set_leader_flag = leader_death_events_blocked
	}
	remove_country_flag = tec_force_normal_traits
}

tec_country_refragment_aiauth_node = {
	save_event_target_as = tec_aiauth_pre_refragment
	switch = {
		trigger = has_ethic
		ethic_materialist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_materialist
				}
			}
		}
		ethic_spiritualist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_spiritualist
				}
			}
		}
		ethic_egalitarian = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_egalitarian
				}
			}
		}
		ethic_authoritarian = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_authoritarian
				}
			}
		}
		ethic_pacifist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_pacifist
				}
			}
		}
		ethic_militarist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_militarist
				}
			}
		}
		ethic_xenophile = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_xenophile
				}
			}
		}
		ethic_xenophobe = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_xenophobe
				}
			}
		}
		ethic_cooperative = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_cooperative
				}
			}
		}
		ethic_competitive = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_competitive
				}
			}
		}
		ethic_ecologist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_ecologist
				}
			}
		}
		ethic_industrialist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_industrialist
				}
			}
		}
		ethic_pluralist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_pluralist
				}
			}
		}
		ethic_elitist = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_elitist
				}
			}
		}
		ethic_gestalt_consciousness = {
			kill_leader = { show_notification = no }
			prev = {
				$FRAGMENT_EFFECT$ = {
					ETHIC = ethic_gestalt_consciousness
				}
			}
		}
	}
}

tec_country_fragment_aiauth_node_cost = {
	add_resource = {
		unity = -1
		mult = value:tec_aiauth_fragment_cost
	}
}


tec_country_defaulted_aiauth_ai_power_situation_tooltip = {
	tooltip = {
		owner = { tec_country_defaulted_aiauth_ai_power_effect = yes }
	}
	custom_tooltip = tec_deficit_situation_extra_ai_power_defaulted_tooltip
}

tec_country_defaulted_aiauth_ai_power_effect = {
	add_modifier = {
		modifier = pm_tec_country_ai_power_defaulted
		years = 10
	}
	hidden_effect = {
		if = {
			limit = { is_ai = yes }
			log = "AI [This.GetName] defaulted as a result of [Root.GetName] in [GetYear]"
		}
		else = {
			log = "Player [This.GetName] defaulted as a result of [Root.GetName] in [GetYear]"
		}
		every_owned_leader = {
			limit = {
				tec_is_aiauth_node = yes
				is_ruler = no
			}
			kill_leader = { show_notification = no }
		}
	}
	custom_tooltip = tec_end_ai_power_deficit_effect_tooltip
}


tec_country_unlock_council_selection = {
	if = {
		limit = {
			has_paragon_dlc = yes
		}
		unlock_council_selection = yes
	}
	else = {
		force_add_civic = civic_tec_force_debug
		force_remove_civic = civic_tec_force_debug
	}
}

tec_planet_force_update_desgnation = {
	set_planet_flag = tec_force_designation_refresh
	set_colony_type = col_tec_force
	remove_planet_flag = tec_force_designation_refresh

}

tec_planet_psionically_ascend_pops_effect = {
	create_variable_if_not_exists = {
		VARIABLE = tec_psionic_planet_ascended_pops
		VALUE_IF_CREATED = 0
	}
	while = {
		count = value:tec_psionic_planet_ascension_pop_ascend
		remove_planet_flag = tec_psionic_planet_ascension_found_pop

		# Xenos
		if = {
			limit = {
				not = { has_planet_flag = tec_psionic_planet_ascension_found_pop }
				has_planet_flag = tec_psionic_planet_ascension_xenos
			}
			random_owned_pop = {
				limit = {
					species = {
						tec_is_any_psionic_species = yes
						NOT = { is_same_species = prev.owner.owner_main_species }
					}
					is_sapient = yes
				}

				kill_pop = yes
				prev = {
					set_planet_flag = tec_psionic_planet_ascension_found_pop
					change_variable = {
						which = tec_psionic_planet_ascended_pops
						value = 1
					}
				}
			}
		}

		# Slaves
		if = {
			limit = {
				not = { has_planet_flag = tec_psionic_planet_ascension_found_pop }
				has_planet_flag = tec_psionic_planet_ascension_slaves
			}
			random_owned_pop = {
				limit = {
					species = {
						tec_is_any_psionic_species = yes
					}
					is_enslaved = yes
					is_sapient = yes
				}

				kill_pop = yes
				prev = {
					set_planet_flag = tec_psionic_planet_ascension_found_pop
					change_variable = {
						which = tec_psionic_planet_ascended_pops
						value = 1
					}
				}
			}
		}

		# Non necrophage/elder
		if = {
			limit = {
				not = { has_planet_flag = tec_psionic_planet_ascension_found_pop }
				exists = owner
				owner = {
					OR = {
						has_origin = origin_necrophage
						has_civic = civic_tec_origin_elders
					}
				}
				count_owned_pop = {
					limit = {
						species = {
							tec_is_any_psionic_species = yes
							NOT = { has_trait = trait_necrophage }
							NOT = { has_trait = trait_tec_se_elder }
						}
						is_sapient = yes
					}
					count > 1
				}
			}
			random_owned_pop = {
				limit = {
					species = {
						tec_is_any_psionic_species = yes
						NOT = { has_trait = trait_necrophage }
						NOT = { has_trait = trait_tec_se_elder }
					}
					is_sapient = yes
				}

				kill_pop = yes
				prev = {
					set_planet_flag = tec_psionic_planet_ascension_found_pop
					change_variable = {
						which = tec_psionic_planet_ascended_pops
						value = 1
					}
				}
			}
		}

		# Rest
		if = {
			limit = {
				not = { has_planet_flag = tec_psionic_planet_ascension_found_pop }
			}
			random_owned_pop = {
				limit = {
					species = {
						tec_is_any_psionic_species = yes
					}
					is_sapient = yes
				}

				kill_pop = yes
				prev = {
					set_planet_flag = tec_psionic_planet_ascension_found_pop
					change_variable = {
						which = tec_psionic_planet_ascended_pops
						value = 1
					}
				}
			}
		}
	}
}